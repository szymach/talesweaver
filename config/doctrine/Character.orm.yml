---
Domain\Entity\Character:
    type: entity
    table: character_entity
    repositoryClass: App\Repository\Doctrine\CharacterRepository
    id:
        id:
            type: uuid
            generator: { strategy: NONE }
    fsi:
        translatable:
            locale: locale
            fields:
                name:
                    mappedBy: translations
                    targetField: name
                description:
                    mappedBy: translations
                    targetField: description
    fields:
        avatarKey:
            type: text
            nullable: true
            fsi: { uploadable: { targetField: avatar } }
        createdAt:
            type: datetime
        updatedAt:
            type: datetime
            nullable: true
    oneToMany:
        translations:
            targetEntity: Domain\Entity\Translation\CharacterTranslation
            mappedBy: character
            indexBy: locale
            cascade: [persist, remove]
    manyToOne:
        book:
            targetEntity: Domain\Entity\Book
            joinColumn:
                onDelete: CASCADE
        createdBy:
            targetEntity:  Domain\Entity\User
            joinColumn:
                onDelete: CASCADE
    manyToMany:
        chapters:
            targetEntity: Domain\Entity\Chapter
            mappedBy: characters
        scenes:
            targetEntity: Domain\Entity\Scene
            mappedBy: characters
        items:
            targetEntity: Domain\Entity\Item
            inversedBy: characters
        locations:
            targetEntity: Domain\Entity\Location
            inversedBy: characters
